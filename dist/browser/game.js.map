{"version":3,"sources":["../../game.js"],"names":["produce","JSON_delta","deepcopy","context","Symbol","Game","state","filters","getFilters","f","default","filterMode","filterKey","action","undefined","Error","views","newState","oldContext","mode","diffs","setupFilters","draft","updateState","process","env","NODE_ENV","replayResult","replayAction","filteredNewState","diff","length","error","result","replay","newInfo","newInfos","diffIndex","transform","_playApplyUpdate","_replayApplyUpdate","original","updatedViews","push","_transform","patch"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\nimport { JSON_delta } from \"./vendor-json-delta\";\r\n\r\nimport deepcopy from \"deepcopy\";\r\n\r\nconst context = Symbol(\"context\");\r\n\r\nclass Game {\r\n  static setupFilters(state) {\r\n    const filters = this.getFilters(state);\r\n    let f;\r\n    if (typeof filters == \"function\") {\r\n      f = { default: filters };\r\n      this[context].filterMode = \"single\";\r\n    } else {\r\n      f = filters;\r\n      this[context].filterMode = \"multi\";\r\n    }\r\n    this[context].filters = {};\r\n    for (let filterKey in f) {\r\n      this[context].filters[filterKey] = produce(f[filterKey]);\r\n    }\r\n  }\r\n\r\n  static filter(state, filterKey) {\r\n    const filters = this.getFilters(state);\r\n    if (typeof filters == \"function\") {\r\n      return produce(state, filters);\r\n    } else {\r\n      return produce(state, filters[filterKey]);\r\n    }\r\n  }\r\n\r\n  static getFilters() {\r\n    // default implementation if not overridden\r\n    return () => {};\r\n  }\r\n\r\n  static playAction(state, action) {\r\n    if (this[context] !== undefined) {\r\n      throw new Error(\r\n        \"Nested calls to playAction()/replayAction() are not supported\"\r\n      );\r\n    }\r\n    let views = {},\r\n      newState,\r\n      oldContext;\r\n    try {\r\n      this[context] = { mode: \"play\", diffs: {} };\r\n      this.setupFilters(state);\r\n      for (let filterKey in this[context].filters) {\r\n        views[filterKey] = this[context].filters[filterKey](state);\r\n        this[context].diffs[filterKey] = [];\r\n      }\r\n      newState = produce(state, draft => {\r\n        return this.updateState(draft, action);\r\n      });\r\n    } finally {\r\n      oldContext = this[context];\r\n      this[context] = undefined;\r\n    }\r\n    if (process.env.NODE_ENV != \"production\") {\r\n      // development or test\r\n      for (let filterKey in oldContext.filters) {\r\n        const replayResult = this.replayAction(\r\n          views[filterKey],\r\n          action,\r\n          oldContext.diffs[filterKey]\r\n        );\r\n        const filteredNewState = oldContext.filters[filterKey](newState);\r\n        const diff = JSON_delta.diff(replayResult, filteredNewState);\r\n        if (diff.length != 0) {\r\n          const error = new Error(\r\n            \"Result of replaying the action did not match the new state\"\r\n          );\r\n          error.result = filteredNewState;\r\n          error.replay = replayResult;\r\n          error.diff = diff;\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    if (oldContext.filterMode == \"single\") {\r\n      const newInfo = oldContext.diffs[\"default\"];\r\n      return { state: newState, newInfo };\r\n    } else {\r\n      return { state: newState, newInfos: oldContext.diffs };\r\n    }\r\n  }\r\n\r\n  static replayAction(state, action, diffs) {\r\n    if (this[context] !== undefined) {\r\n      throw new Error(\r\n        \"Nested calls to playAction()/replayAction() are not supported\"\r\n      );\r\n    }\r\n    let result;\r\n    try {\r\n      this[context] = { mode: \"replay\", diffs, diffIndex: 0 };\r\n      result = produce(state, draft => {\r\n        return this.updateState(draft, action);\r\n      });\r\n    } finally {\r\n      this[context] = undefined;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static applyUpdate(state, transform) {\r\n    switch (this[context].mode) {\r\n      case \"play\":\r\n        this._playApplyUpdate(state, transform);\r\n        break;\r\n      case \"replay\":\r\n        this._replayApplyUpdate(state, transform);\r\n        break;\r\n    }\r\n  }\r\n\r\n  static _playApplyUpdate(draft, transform) {\r\n    // Have to clone the previous state here as Immer will try to help out with\r\n    // structural sharing which breaks because this is really a mutable draft\r\n    const original = deepcopy(draft);\r\n    const views = {};\r\n    for (let filterKey in this[context].filters) {\r\n      views[filterKey] = produce(original, this[context].filters[filterKey]);\r\n    }\r\n    transform(draft);\r\n    const updatedViews = {};\r\n    for (let filterKey in this[context].filters) {\r\n      updatedViews[filterKey] = produce(\r\n        draft,\r\n        this[context].filters[filterKey]\r\n      );\r\n      // We deepcopy the diff here to ensure that it contains references\r\n      // only to plain objects and not proxies\r\n      const diff = deepcopy(\r\n        JSON_delta.diff(views[filterKey], updatedViews[filterKey])\r\n      );\r\n      this[context].diffs[filterKey].push(diff);\r\n    }\r\n  }\r\n\r\n  static _replayApplyUpdate(state, _transform) {\r\n    // We also have to clone the diff we are applying, because otherwise\r\n    // modifying the state later on can also modify the original diff!\r\n    const diff = deepcopy(this[context].diffs[this[context].diffIndex]);\r\n    JSON_delta.patch(state, diff);\r\n    this[context].diffIndex++;\r\n  }\r\n}\r\n\r\nexport default Game;\r\n"],"file":"game.js"}